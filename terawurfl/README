Tera-WURFL README
Version Stable 2.0.0
http://www.tera-wurfl.com/
-----------------------
Complete code-rewrite from the ground up. The 2.x version of Tera-WURFL is loosely based on a pre-release 
of the Java WURFL Evolution Library, but the API is taken from Tera-WURFL 1.5.2. The following is a list 
of features found in Tera-WURFL 2.0:
User Agent Matchers have been created for each of the major manufacturers. These allow for specific 
	matching methods to be applied to the user agent like string searching, RIS (Reduction in String) and 
	LD (Levenshtein Distance).
Multiple patch files are now supported. Tera-WURFL ships with the current wurfl.xml, web_browsers_patch.xml 
	and custom_web_patch.xml. Patch files can be added to TeraWurflConfig.php by separating them with 
	semicolons in the TeraWurflConfig::PATCH_FILE directive. Patch files are loaded in order from left to 
	right on top of the WURFL file, so if you want to override every other patch file, specify it last.
The custom_web_patch.xml file can be edited from the Web Administration page, and allows you to easily add 
	non-mobile user agents to the patch file. The devices with these user agents will be detected as 
	generic_web_browser (non-mobile).
Persistent Caching means that your cached devices stay cached. When you update the WURFL file or your
	patches, your device cache is also updated via the new database.
Cache Browser allows you to see what devices are hitting your site and what their capabilities were
	detected as.
Installation Script is better than 1.5.2. Once you download Tera-WURFL and extract it, edit 
	TeraWurflConfig.php then go to /admin/install.php and follow the directions to finish installation.
PHP short_open_tags are no longer required to run Tera-WURFL. PHP has this feature disabled by default now.
Conclusive vs. Inconclusive Matching. If a device is matched with the UserAgentMatcher's primary matching 
	method it is considered a conclusive match, if it is detected via a recovery matcher or by the 
	CatchAllMatcher it is an inconclusive match. This information is available via the tera_wurfl 
	capability group.
tera_wurfl Capability Group. The TeraWurfl->Capabilities array now contains a group called "tera_wurfl". 
	This group contains the following Tera-WURFL related information:
	- num_queries - the number of database queries required to lookup the device.
	- actual_root_device - the WURFL ID of the actual device (not subrevision or generic), this can be null.
	- match_type - either conclusive or inconclusive.
	- matcher - the name of the UserAgentMatcher that detected the device.
	- match - whether or not there was an actual match. If there was no match, Tera-WURFL guessed which 
		generic device is most similar to the device.
	- lookup_time - the time in seconds that it took to detect the device.
	- fall_back_tree - the complete fallback tree that built the capabilities of the device. This is a list
		of all the WURFL IDs from the detected device down to the base generic device.

JUST GET ME TO THE INSTALLATION!
Ok, it took me a lot longer to write this then it will take you to read it,
so please read EVERYTHING from INSTALLATION on.  Feel free to email me if
you need help with anything, or to request new features.

ABOUT TERA-WURFL
Tera-WURFL is a PHP & MySQL based library that uses the Wireless Universal
Resource File (WURFL). The WURFL website  nicely defines the WURFL as
follows: "The WURFL is an "ambitious" configuration file that contains
info about all known Wireless devices on earth. Of course, new devices are
created and released at all times. While this configuration file is bound 
to be out of date one day after each update, chances are that the WURFL 
lists all of the WAP devices you can purchase in the nearest shops."

Tera-WURFL takes some functionality from the original PHP Tools Library by 
Andrea Trasatti and a prerelease version of the Java WURFL Evolution. It 
serves as a drop in replacement for the original PHP Tools with only minor 
changes to your existing code. Since Tera-WURFL uses a database backend 
(currently only MySQL), the real world performance increase over the 
existing PHP Tools implementation is extremely high - normally between 5x 
and 10x faster!

The author of Tera-WURFL is Steve Kamerman, a professional PHP Programmer,
MySQL DBA, Flash/Flex Actionscript Developer, Linux Administrator, 
IT Manager and part-time American Soldier. This project was originally 
sponsored by Tera Technologies and was developed as an internal project 
used for delivering content to customers of the mobile ringtone and image 
creation site Tera-Tones.com..

Read more about Tera-WURFL and download the latest release at:
http://www.tera-wurfl.com/

See what else Steve Kamerman has cookin' at his blog:
http://www.teratechnologies.net/stevekamerman/

INSTALLATION
1. Copy the files into a directory on your webserver that can be accessed
   from the internet.  For the purposes of explaination I will refer to this
   location as "http://yourserver.com/Tera-Wurfl/", with a local directory
   of "/var/www/Tera-Wurfl/".
2. Open a web browser and go to:
   "http://yourserver.com/Tera-Wurfl/admin/install.php"
   you should see the "Tera-WURFL Installation" page with a bunch of errors
   on it.  The next steps will show you how to correct these errors.  You 
   can refresh this page to verify that your changes have taken effect.

CONFIGURATION FILE
3. Edit the TeraWurflConfig.php file.  Each setting is described in comments.
	The only thing you NEED to modify is the database info (user, pass, db, etc)
	NOTE: if you are using MySQL 4, you must set DB_CONNECTOR to MySQL4

FILE PERMISSIONS
4. By default, the DATADIR is set to "data/".  This directory holds the
   wurfl.xml file, your patch file(s) and the log file.  This directory
   and EVERYTHING in it needs to be accessible (read+write) by the user
   that runs your webserver. This is normally "apache", "www-data" or 
   "nobody" in Linux. (chown -R apache:apache ./data/)
5. Verify that the permissions errors on the installation page are fixed
   by refreshing the browser.
   
DATABASE OPTIONS
6. Create a new database for Tera-WURFL and a user that has a minimum of
   the following privileges on the new database:
      SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, ALTER, CREATE TMP TABLE,
      CREATE ROUTINE, ALTER ROUTINE, EXECUTE
7. In the config file, set the DB_HOST, DB_USER, DB_PASS and DB_SCHEMA.
8. Verify that the database errors on the installation page are fixed
   by refreshing the browser.  If the database tables don't exist yet
   they will be created for you when you load the WURFL file.

LOADING THE Tera-WURFL DATABASE
9. If you are satisfied with the results on the installation page, you
   can load the database with the WURFL data.  There are three sources
   that the data can come from:
   a. Your local WURFL file
      This will load the DATADIR/wurfl.xml file into your database.
   b. The current released WURFL
      This will download the current wurfl.xml file from the official
      WURFL website and load it into your database.
   c. The current CVS WURFL
      This will download the current unreleased CVS wurfl.xml file from
      the official WURFL website and load it into your database.
10.There will be a delay while the server loads/downloads the WURFL, then
   you should see something like this:

Database Update OK

Total Time: 10.211848974228
Parse Time: 0.43991899490356
Validate Time: 2.7456870079041
Sort Time: 1.3005568981171
Patch Time: 0.44084501266479
Database Time: 3.9245390892029
Cache Rebuild Time: 1.3603019714355
Number of Queries: 294
PHP Memory Usage: 213.19 MB
--------------------------------
WURFL Version: www.wurflpro.com - 2009-08-25 08:15:48 (Tue Aug 25 08:19:41 -0500 2009)
WURFL Devices: 13714
PATCH New Devices: 3036
PATCH Merged Devices: 2

Update Complete!
   
   If there are errors, they are most likely problems connecting to the WURFL
   site or permission problems trying to write the temporary downloaded file
   to the DATADIR directory.  Also, many users have reported a "memory allocation"
   error - to fix this look for "OVERRIDE_MEMORY_LIMIT" in the config file. If 
   there are no errors, click on "Return to administration tool".

ADMINISTRATION PAGE
11.Verify that the WURFL is loaded by clicking on "Statistics, Settings,
   Log File".  You should see that there is data in your MERGE and INDEX
   tables. The CACHE table will fill up with cached data as devices access
   your site, and it will be cleared ONLY if you click on "Clear the device
   cache" from main administration page.
12.Click on "Tera-WURFL test script" to test the installation.  You can
   type in any user agent to search for it in the WURFL.  If you have caching
   enabled (default), the first time you search for a user agent you will see
   the total number of queries that Tera-WURFL performed to find a match
   (unless there was no match).  If there was a match, the device will be
   cached and the next time you search for it you will see "Total Queries: 1
   (Found in cache)".  Tera-WURFL only needed to perform 1 query since the
   devices full capabilities were cached.  If you go back to the admin page
   and look at the settings, you will see that the CACHE now has
   a couple rows in it.  You can verify the device was cached properly by going
   to "Cache Browser" from the main page and clicking on your user agent.
   
SECURITY
13.You should delete the admin/install.php file if everything is working ok.
14.Protect your 'admin' directory by using a method specific to your web
   server software.  For Apache, this means a .htaccess file would work:
   http://www.mobilefish.com/developer/apache/apache_quickguide_htaccess.html#protect

EXAMPLE
Here is a very simple example:
<?php
// Include the Tera-WURFL file
require_once('./TeraWurfl.php');

// instantiate the Tera-WURFL object
$wurflObj = new TeraWurfl();

// Get the capabilities of the current client. $matched will be true if Tera-WURFL
// found a match for the device and false if not.
$matched = $wurflObj->getDeviceCapabilitiesFromAgent($_SERVER['HTTP_USER_AGENT']);

// see if this client is on a wireless device (or if they can't be identified)
if(!$matched || !$wurflObj->getDeviceCapability("is_wireless_device")){
	echo "<h2>You should not be here</h2>";
}

// see what this device's preferred markup language is
echo "Markup: ".$wurflObj->getDeviceCapability("preferred_markup");

// see the display resolution
$width = $wurflObj->getDeviceCapability("resolution_width");
$height = $wurflObj->getDeviceCapability("resolution_height");
echo "<br/>Resolution: $width x $height<br/>";
?>

The complete list of capabilities is available here:
http://wurfl.sourceforge.net/help_doc.php#product_info
If you use $wurflObj->getDeviceCapability("cap_name") you can just use the capability name from
the WURFL site, otherwise you can access it directly from the wurfl object's
capabilities array like this: $wurflObj->capabilities['group_name']['cap_name']

Please see the test script (check_wurfl.php) for another example of usage.

SUPPORT

You may contact me, Steve Kamerman with questions:
stevekamerman{at}gmail_dot_com
      
NOTE: The public methods from the WURFL PHP Tools class at 
wurfl.sourceforge.net are avalible in this class and they all use the same
syntax as before with the exception of the constructor - "TeraWurfl" which has
been renamed from "wurfl_class".